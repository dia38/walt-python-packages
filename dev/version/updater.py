#!/usr/bin/env python
import sys, os, subprocess, hashlib
from collections import OrderedDict
sys.path.append(os.getcwd())
from dev.api.source import SourceImporter
from dev.tools.pretty import pprint_dict
from dev.metadata import PACKAGE_GENERIC_INFO, PACKAGE_SPECIFIC_INFO

versions_file_template = """\
# auto-generated by dev/version/updater.py

API_VERSIONING = %(api_versioning)s

UPLOAD = %(upload)s
"""

info_file_template = """\
# auto-generated by dev/version/updater.py
# using metadata from dev/metadata.py

SETUP_INFO = %(setup_info)s
"""

# instanciate our source import system and activate it.
importer = SourceImporter({ 'walt.common': './common/walt/common' })
importer.activate()
from walt.common.versions import API_VERSIONING as CUR_API_VERSIONING, \
                                 UPLOAD as CUR_UPLOAD
# retrieve API hash using dev/api/explorer.py
# for each component (client, server, node), compare
# with what we had before and increment the api version
# if it changed.
API_PATH = {
    'SERVER': 'walt.server.daemon',
    'CLIENT': 'walt.client.client',
    'NODE': 'walt.node.daemon'
}

new_api_versioning = CUR_API_VERSIONING.copy() # for now
new_upload = CUR_UPLOAD + 1     # we increment at each upload

for component, module_path in API_PATH.items():
    new_api_proto = subprocess.check_output(
        [ 'dev/api/explorer.py', module_path ])
    new_api_hash = hashlib.sha224(new_api_proto).hexdigest()
    cur_api_num, cur_api_hash = CUR_API_VERSIONING[component]
    if cur_api_hash != new_api_hash:
        # API of this component as changed, increment api_num
        # and update hash for next time.
        new_api_versioning[component] = (cur_api_num+1, new_api_hash)

new_versions_file = versions_file_template % dict(
    api_versioning = pprint_dict(new_api_versioning),
    upload = new_upload
)

# write updated info in walt/common/versions.py
with open("common/walt/common/versions.py", "w") as f:
    f.write(new_versions_file)

# generate info.py in each pypi package directory
versions_info = dict(
    upload = new_upload,
    server_api = new_api_versioning['SERVER'][0],
    client_api = new_api_versioning['CLIENT'][0],
    node_api = new_api_versioning['NODE'][0]
)

for package_name, package_specific in PACKAGE_SPECIFIC_INFO.items():
    setup_info = OrderedDict()
    setup_info.update(name = package_name)
    version = package_specific['version_str'] % versions_info
    setup_info.update(version = version)
    install_requires = [ requirement % versions_info \
        for requirement in package_specific['requires'] ]
    setup_info.update(install_requires = install_requires)
    setup_info.update(sorted(PACKAGE_GENERIC_INFO.items()))
    setup_info.update(sorted(package_specific['setup'].items()))
    new_info_file = info_file_template % dict(
        setup_info = pprint_dict(setup_info)
    )
    with open("%s/info.py" % package_specific['subdir'], 'w') as f:
        f.write(new_info_file)
